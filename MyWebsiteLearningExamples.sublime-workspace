{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 1961,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nCodeFormatter:\n-------------\n\n  Thanks for installing Sublime CodeFormatter! Below are some quick notes to get you\n  started with the plugin.\n  \n  CodeFormatter\n  =============\n  \n  \n  CodeFormatter is a Sublime Text 2/3 plugin that supports format (beautify) source code.\n  \n  \n  CodeFormatter has support for the following languages:\n  \n  * PHP - By PHP_Beautifier\n  * JavaScript/JSON/JSONP - By JSBeautifier\n  * HTML - By JSBeautifier\n  * CSS - By JSBeautifier\n  * Python - By PythonTidy (only ST2)\n  \n  \n  \n  Installing\n  ----------\n  **With the Package Control plugin:** The easiest way to install CodeFormatter is through Package Control, which can be found at this site: http://wbond.net/sublime_packages/package_control\n  \n  Once you install Package Control, restart Sublime Text and bring up the Command Palette (`Command+Shift+P` on OS X, `Control+Shift+P` on Linux/Windows). Select \"Package Control: Install Package\", wait while Package Control fetches the latest package list, then select CodeFormatter when the list appears. The advantage of using this method is that Package Control will automatically keep CodeFormatter up to date with the latest version.\n  \n  **Without Git:** Download the latest source from [GitHub](https://github.com/akalongman/sublimetext-codeformatter) and copy the CodeFormatter folder to your Sublime Text \"Packages\" directory.\n  \n  **With Git:** Clone the repository in your Sublime Text \"Packages\" directory:\n  \n      git clone https://github.com/akalongman/sublimetext-codeformatter.git CodeFormatter\n  \n  \n  The \"Packages\" directory is located at:\n  \n  * OS X:\n  \n          ST2: ~/Library/Application Support/Sublime Text 2/Packages/\n          ST3: ~/Library/Application Support/Sublime Text 3/Packages/\n  \n  * Linux:\n  \n          ST2: ~/.config/sublime-text-2/Packages/\n          ST3: ~/.config/sublime-text-3/Packages/\n  \n  * Windows:\n  \n          ST2: %APPDATA%/Sublime Text 2/Packages/\n          ST3: %APPDATA%/Sublime Text 3/Packages/\n  \n  \n  ## Formatter-specific notes\n  Following are notes specific to individual formatters that you should be aware of:\n  ### PHP\n  PHP - Used custom fork (which works without pear) of [Php_beautifier] (http://pear.php.net/package/PHP_Beautifier) package by Claudio Bustos and Jes√∫s Espino.\n  \n  Getting and installing PHP - http://www.php.net/manual/en/install.general.php\n  \n  On Linux/OSx after installation of package, you must set chmod +x to file php_beautifier in folder %PACKAGESDIR%/CodeFormatter/codeformatter/lib/phpbeautifier\n  \n  Language specific options:\n  ```js\n  	// Path for PHP executable, e.g. \"C:/Program Files/PHP/php.exe\". If empty, uses command \"php\" from system environments\n  	\"codeformatter_php_path\": \"\",\n  \n  	\"codeformatter_php_options\":\n  	{\n  		\"indent_size\": 4, // Indent size\n  		\"indent_with_tabs\": false, // Indent with tabs or spaces\n  		\"indent_style\": \"k&r\", // Indent the code in k&r, allman, gnu or whitesmiths style\n  		\"newline_before_comment\": true, // add new line before comment block\n  		// Add new lines after o before specific contents The settings are 'before' and 'after'. As value, use a comma separated list of contents or tokens, e.g. switch,while,for,foreach,try,namespace,T_INTERFACE\n  		\"new_line_before\": \"\",\n  		\"new_line_after\": \"\",\n  		\"format_array_nested\": false, // Indent the array structures Ex.\n  		\"pear\": true, // Format the code to make it compatible with PEAR Coding Standards\n  		\"pear_add_header\": \"\", // Add one of the standard PEAR comment header (php, bsd, apache, lgpl, pear) or any file as licence header.\n  		// Two extra options allows to break the spec about newline before braces on function, classes and traits:\n  		\"pear_newline_class\": true, // need enabled pear option\n  		\"pear_newline_trait\": true, // need enabled pear option\n  		\"pear_newline_function\": false, // need enabled pear option\n  		\"pear_switch_without_indent\": false, // Disable extra switch identation\n  		\"lowercase\": false, // Lowercase all control structures. Such as TRUE, FALSE, SWITCH and more\n  		\"fluent\": false, // Create fluent style for multi-level object access.\n  		\"list_class_function\": false, // Create a list of functions and classes in the script By default, this Filter puts the list at the beggining of the script.\n  		\"equals_align\": false, // Align the equals symbols in contiguous lines.\n  		\"phpbb\": false // Format the code to make it compatible with phpBB Coding Standards (if enabled, overrides some another options)\n  	},\n  ```\n  \n  \n  \n  ### Javascript/JSON\n  Javascript/JSON/JSONP - used [JSBeautifier] (http://jsbeautifier.org/) by Einar Lielmanis\n  \n  Language specific options:\n  ```js\n  	\"codeformatter_js_options\":\n  	{\n  		\"indent_size\": 4, // indentation size\n  		\"indent_char\": \" \", // Indent character\n  		\"indent_with_tabs\": false, // Indent with one tab (overrides indent_size and indent_char options)\n  		\"preserve_newlines\": false, // whether existing line breaks should be preserved,\n  		\"max_preserve_newlines\": 10, // maximum number of line breaks to be preserved in one chunk\n  		\"space_in_paren\": false, // Add padding spaces within paren, ie. f( a, b )\n  		\"e4x\": false, // Pass E4X xml literals through untouched\n  		\"jslint_happy\": false, // if true, then jslint-stricter mode is enforced. Example function () vs function()\n  		\"brace_style\": \"collapse\", // \"collapse\" | \"expand\" | \"end-expand\". put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n  		\"keep_array_indentation\": false, // keep array identation.\n  		\"keep_function_indentation\": false, // keep function identation.\n  		\"eval_code\": false, // eval code\n  		\"unescape_strings\": false, // Decode printable characters encoded in xNN notation\n  		\"wrap_line_length\": 0, // Wrap lines at next opportunity after N characters\n  		\"break_chained_methods\": false // Break chained method calls across subsequent lines\n  	}\n  ```\n  \n  ### HTML\n  HTML - used custom python port, please use it with caution, feature in early beta\n  \n  Language specific options:\n  ```js\n  	\"codeformatter_html_options\":\n  	{\n  		\"indent_size\": 4, // indentation size\n  		\"indent_char\": \" \", // Indentation character\n  		\"indent_with_tabs\": false, // Indent with one tab (overrides indent_size and indent_char options)\n  		\"preserve_newlines\": false, // Preserve existing line-breaks\n  		\"max_preserve_newlines\": 10, // Maximum number of line-breaks to be preserved in one chunk\n  		\"indent_tags\": \"html|head|body|div|nav|ul|ol|dl|li|table|thead|tbody|tr|th|td|blockquote|select|form|option|optgroup|fieldset|legend|label|header|section|aside|footer|figure|video\" // List of tags (defaults to indent) that should be reformatted. Example \"div|p|li|table\"\n  	}\n  ```\n  \n  ### CSS\n  CSS - used [JSBeautifier] (http://jsbeautifier.org/) by Einar Lielmanis and Style Css by Harutyun Amirjanyan\n  \n  Language specific options:\n  ```js\n  	\"codeformatter_css_options\":\n  	{\n  		\"indent_size\": 4, // Indentation size\n  		\"indent_char\": \" \", // Indentation character\n  		\"indent_with_tabs\": false, // Indent with one tab (overrides indent_size and indent_char options)\n  		\"selector_separator_newline\": false, // Add new lines after selector separators\n  		\"end_with_newline\": false // Add new line of end in file\n  	}\n  ```\n  ### Python\n  CSS - used [PythonTidy] (https://pypi.python.org/pypi/PythonTidy/) by Chuck Rhode\n  \n  Language specific options:\n  ```js\n  	\"codeformatter_python_options\":\n  	{\n  		\"indent_size\": 1, // indentation size\n  		\"indent_with_tabs\": true, // Indent with tabs or spaces\n  		\"max_char\": 80, // Width of output lines in characters.\n  		\"assignment\": \" = \", // This is how the assignment operator is to appear.\n  		\"function_param_assignment\": \"=\", // This is how function-parameter assignment should appear.\n  		\"function_param_sep\": \", \", // This is how function parameters are separated.\n  		\"list_sep\": \", \", // This is how list items are separated.\n  		\"subscript_sep\": \"=\", // This is how subscripts are separated.\n  		\"dict_colon\": \": \", // This separates dictionary keys from values.\n  		\"slice_colon\": \":\", // this separates the start:end indices of slices.\n  		\"comment_prefix\": \"# \", // This is the sentinel that marks the beginning of a commentary string.\n  		\"shebang\": \"#!/usr/bin/env python\", // Hashbang, a line-one comment naming the Python interpreter to Unix shells.\n  		\"boilerplate\": \"\", // Standard code block (if any). This is inserted after the module doc string on output.\n  		\"blank_line\": \"\", // This is how a blank line is to appear (up to the newline character).\n  		\"keep_blank_lines\": true, // If true, preserve one blank where blank(s) are encountered.\n  		\"add_blank_lines_around_comments\": true, // If true, set off comment blocks with blanks.\n  		\"add_blank_line_after_doc_string\": true, // If true, add blank line after doc strings.\n  		\"max_seps_func_def\": 3, // Split lines containing longer function definitions.\n  		\"max_seps_func_ref\": 5, // Split lines containing longer function calls.\n  		\"max_seps_series\": 5, // Split lines containing longer lists or tuples.\n  		\"max_seps_dict\": 3, // Split lines containing longer dictionary definitions.\n  		\"max_lines_before_split_lit\": 2, // Split string literals containing more newline characters.\n  		\"left_margin\": \"\", // This is how the left margin is to appear.\n  		\"normalize_doc_strings\": false, // If true, normalize white space in doc strings.\n  		\"leftjust_doc_strings\": false, // If true, left justify doc strings.\n  		\"wrap_doc_strings\": false, // If true, wrap doc strings to max_char.\n  		\"leftjust_comments\": false, // If true, left justify comments.\n  		\"wrap_comments\": false, // If true, wrap comments to max_char.\n  		\"double_quoted_strings\": false, // If true, use quotes instead of apostrophes for string literals.\n  		\"single_quoted_strings\": false, // If true, use apostrophes instead of quotes for string literals.\n  		\"can_split_strings\": false, // If true, longer strings are split at the max_char.\n  		\"doc_tab_replacement\": \"....\", // This literal replaces tab characters in doc strings and comments.\n  \n  		// Optionally preserve unassigned constants so that code to be tidied\n  		// may contain blocks of commented-out lines that have been no-op'ed\n  		// with leading and trailing triple quotes.  Python scripts may declare\n  		// constants without assigning them to a variables, but CodeFormatter\n  		// considers this wasteful and normally elides them.\n  		\"keep_unassigned_constants\": false,\n  \n  		// Optionally omit parentheses around tuples, which are superfluous\n  		// after all.  Normal CodeFormatter behavior will be still to include them\n  		// as a sort of tuple display analogous to list displays, dict\n  		// displays, and yet-to-come set displays.\n  		\"parenthesize_tuple_display\": true,\n  \n  		// When CodeFormatter splits longer lines because max_seps\n  		// are exceeded, the statement normally is closed before the margin is\n  		// restored.  The closing bracket, brace, or parenthesis is placed at the\n  		// current indent level.  This looks ugly to \"C\" programmers.  When\n  		// java_style_list_dedent is True, the closing bracket, brace, or\n  		// parenthesis is brought back left to the indent level of the enclosing\n  		// statement.\n  		\"java_style_list_dedent\": false\n  	}\n  ```\n  \n  Usage\n  -----\n  Tools -> Command Palette (`Cmd+Shift+P` or `Ctrl+Shift+P`) and type `Format Code`.\n  \n  You can set up your own key combo for this, by going to Preferences -> Key Bindings - User, and adding a command in that huge array: `{ \"keys\": [\"ctrl+alt+f\"], \"command\": \"code_formatter\" },`. Default keybinding is `ctrl+alt+f`. You can use any other key you want, thought most of them are already taken.\n  \n  TODO\n  -----\n  Add other languages support:\n  * Python (for ST3)\n  * Perl\n  * Ruby\n  \n  Pull requests are welcome.\n  \n  Troubleshooting\n  ---------------\n  If you like living on the edge, please report any bugs you find on the [CodeFormatter issues](https://github.com/akalongman/sublimetext-codeformatter/issues) page.\n  \n  ",
			"settings":
			{
				"buffer_size": 12154,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "for",
		"selected_items":
		[
			[
				"for",
				"CodeFormatter: Format Code"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/G/MyWebsites/HTML"
	],
	"file_history":
	[
		"/C/Users/Jlo/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Jlo/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/G/MyWebsites/HTML/index.html"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1961,
						"regions":
						{
						},
						"selection":
						[
							[
								611,
								611
							]
						],
						"settings":
						{
							"auto_complete": true,
							"history_list_is_closing": true,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12154,
						"regions":
						{
						},
						"selection":
						[
							[
								12154,
								12154
							]
						],
						"settings":
						{
							"auto_indent": false,
							"default_dir": "G:\\MyWebsites\\HTML",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 4485.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "MyWebsiteLearningExamples.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 298.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
